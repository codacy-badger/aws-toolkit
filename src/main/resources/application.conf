akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = DEBUG
  stdout-loglevel = DEBUG # defaults to WARNING can be disabled with off. The stdout-loglevel is only in effect during system startup and shutdown
  log-dead-letters-during-shutdown = off
  log-dead-letters = off
  log-config-on-start = off # Log the complete configuration at INFO level when the actor system is started
  jvm-exit-on-fatal-error = off

  actor {

    # The guardian "/user" will use this class to obtain its supervisorStrategy.
    # It needs to be a subclass of akka.actor.SupervisorStrategyConfigurator.
    # In addition to the default there is akka.actor.StoppingSupervisorStrategy.
    guardian-supervisor-strategy = "com.rahulsinghai.actor.base.ResilientSupervisorStrategy"

    debug {
      receive = on # log all messages sent to an actor if that actor receive method is a LoggingReceive
      autoreceive = off # log all special messages like Kill, PoisoffPill etc sent to all actor
      lifecycle = on # log all actor lifecycle events of all actor
      fsm = off # enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = on # enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }
  }

  test.timefactor = 2.0

  stream {
    materializer {
      debug-logging = on  # Enable additional troubleshooting logging at DEBUG log level
    }
  }

  default-dispatcher {
    # Dispatcher is the name of the event-based dispatcher
    type = Dispatcher
    # What kind of ExecutionService to use
    executor = "fork-join-executor"
    # Configuration for the fork join pool
    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 2
      # Parallelism (threads) ... ceil(available processors * factor)
      parallelism-factor = 1.0
      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 8
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 10
  }

  default-blocking-io-dispatcher {
    type = "Dispatcher"
    executor = "thread-pool-executor"
    throughput = 4

    thread-pool-executor {
      # Keep alive time for threads
      keep-alive-time = 30s

      # Define a fixed thread pool size with this property. The corePoolSize
      # and the maximumPoolSize of the ThreadPoolExecutor will be set to this
      # value, if it is defined. Then the other pool-size properties will not
      # be used.
      #
      # Valid values are: `off` or a positive integer.
      fixed-pool-size = 8
    }
  }

  http {
    host-connection-pool {
      max-connections = 4
      max-retries = 20
    }
    routing {
      relaxed-header-parsing = on
    }

    server {
      interface = "0.0.0.0"
      port = 8080
      password = ""
      idle-timeout = 121 s  # Must be greater than request-timeout
      request-timeout = 120 s  # If ask takes more time than this to complete the request is failed
      server-header = "AWS toolkit ReST API"
      ssl-encryption = off
    }

    caching {
      # Default configuration values for LfuCache
      lfu-cache {
        # Maximum number of entries the cache may store. After the maximum capacity is reached the cache evicts entries that are less likely to be used again. For example, the cache may evict an entry because it hasn't been used recently or very often.
        max-capacity = 32

        # Minimum total size for the internal data structures.
        initial-capacity = 16

        # Upper limit to the time period an entry is allowed to remain in the cache. Set to 'infinite' to disable eviction based on time of write (create or update).
        time-to-live = 10.seconds

        # Maximum time period an entry is allowed to remain in the cache after last access. Access time is reset by all cache read and write operations. Set to 'infinite' to disable time-based expiration.
        time-to-idle = 8.seconds
      }
    }
  }
}

aws {
  accessKey = ""
  secretKey = ""
  region = "eu-west-2"
}

cors {
  allowed-origins = ""   # URI other than *
  allowed-methods = ["GET", "POST", "PUT", "HEAD", "OPTIONS", "DELETE"]
}
